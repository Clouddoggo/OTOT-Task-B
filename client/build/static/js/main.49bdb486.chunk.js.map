{"version":3,"sources":["components/AddBook.js","components/GetAllBooks.js","components/DeleteBook.js","components/UpdateBook.js","components/GetBook.js","App.js","serviceWorker.js","index.js"],"names":["AddBook","props","onChange","event","setState","title","target","value","handleSubmit","preventDefault","state","trim","length","body","fetch","method","headers","JSON","stringify","then","response","ok","added","json","Error","id","message","catch","error","console","log","Card","className","Body","Title","Form","Label","Control","type","placeholder","this","Button","onClick","Component","GetAllBooks","getBooks","a","books","data","e","map","book","key","_id","DeleteBook","deleteBook","deleted","alert","UpdateBook","item","updateBook","updated","required","GetBook","getBookById","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.49bdb486.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Card, Form, Button } from 'react-bootstrap'\r\n\r\nclass AddBook extends Component {\r\n    constructor(props) {\r\n        super();\r\n        this.state = {\r\n            title: \"\",\r\n            added: false\r\n        };\r\n    }\r\n\r\n    onChange = (event) => {\r\n        this.setState({ title: event.target.value });\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const { title } = this.state;\r\n\r\n        if (title.trim().length === 0)\r\n            return;\r\n\r\n\r\n        const body = {\r\n            title,\r\n        };\r\n\r\n        fetch(\"/books\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        })\r\n            .then(response => {\r\n                if (response.ok) {\r\n                    this.setState({ added: true });\r\n                    return response.json();\r\n                }\r\n                throw new Error(`Network response error: ${response.id}, ${response.message}`);\r\n            })\r\n            .catch(error => console.log(error.message));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Card className=\"container shadow p-4 mt-5\">\r\n                <Card.Body>\r\n                    <Card.Title>Add book</Card.Title>\r\n                    <Form className=\"form-inline\">\r\n                        <Form.Label className=\"sr-only\">Title</Form.Label>\r\n                        <Form.Control type=\"text\" className=\"mb-2 mr-sm-2\" placeholder=\"Title\" onChange={this.onChange}\r\n                        />\r\n                        <Button type=\"button\" className=\"btn btn-primary\" onClick={this.handleSubmit}>Submit</Button>\r\n                    </Form>\r\n                    <span>{this.state.added ? `Added: ${this.state.title}. Get All again to see the added book!` : \"No books added!\"}</span>\r\n                </Card.Body>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddBook;","import React, { Component } from 'react';\r\nimport { Card, Button } from 'react-bootstrap';\r\n\r\nclass GetAllBooks extends Component {\r\n    constructor(props) {\r\n        super();\r\n        this.state = {\r\n            books: []\r\n        }\r\n    }\r\n\r\n    getBooks = async (event) => {\r\n        event.preventDefault();\r\n        fetch(`/books`, {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        })\r\n            .then(response => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                }\r\n                throw new Error(`Network response error: ${response.id}, ${response.message}`);\r\n            })\r\n            .then(response => this.setState({ books: response.data }))\r\n            .catch(error => console.log(error.message));\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Card className=\"container shadow p-4 mt-5\">\r\n                <Card.Body>\r\n                    <Card.Title>Get all books</Card.Title>\r\n                    <Button className=\"btn btn-info float-left m-2\" onClick={(e) => this.getBooks(e)}>Get all</Button>\r\n                    <div className=\"d-flex\">\r\n                        <ul className=\"mt-5\">\r\n                            {\r\n                                this.state.books.map((book) => {\r\n                                    return <li key={book._id} className=\"m-2\">Book Id: {book._id}, Title: {book.title}</li>\r\n                                })\r\n                            }\r\n                        </ul>\r\n                    </div>\r\n                </Card.Body>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GetAllBooks;","import React, { Component } from 'react';\r\nimport { Card, Button, Form } from 'react-bootstrap';\r\n\r\nclass DeleteBook extends Component {\r\n    constructor(props) {\r\n        super();\r\n        this.state = {\r\n            id: null,\r\n            deleted: false\r\n        }\r\n    }\r\n\r\n    onChange = (event) => {\r\n        this.setState({ id: event.target.value })\r\n    }\r\n\r\n    deleteBook = (event) => {\r\n        event.preventDefault();\r\n\r\n        const { id } = this.state;\r\n\r\n        if (!id || id.trim().length === 0) {\r\n            alert('Please enter id of book to be deleted')\r\n            return;\r\n        }\r\n\r\n        fetch(`/books/${this.state.id}`, {\r\n            method: \"DELETE\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        })\r\n            .then(response => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                }\r\n                throw new Error(`Network response error: ${response.id}, ${response.message}`);\r\n            })\r\n            .then(response => this.setState({ deleted: true }))\r\n            .catch(error => console.log(error.message));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Card className=\"d-flex container shadow p-4 mt-5\">\r\n                <Card.Body>\r\n                    <Card.Title>Delete a book</Card.Title>\r\n                    <Form className=\"form-inline\">\r\n                        <Form.Label className=\"sr-only\">Id</Form.Label>\r\n                        <Form.Control type=\"text\" className=\"mb-2 mr-sm-2\" placeholder=\"Id\" onChange={this.onChange}\r\n                        />\r\n                        <Button type=\"button\" className=\"btn btn-primary\" onClick={this.deleteBook}>Submit</Button>\r\n                    </Form>\r\n                    <span>{this.state.deleted ? `Deleted book with Id: ${this.state.id}. Get All again to see the new book list!` : \"No books deleted yet!\"}</span>\r\n                </Card.Body>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DeleteBook;","import React, { Component } from 'react';\r\nimport { Card, Form, Button } from 'react-bootstrap'\r\n\r\nclass UpdateBook extends Component {\r\n    // TODO: fix required field. Problem: if use submit, page will refresh due to boostrap. But if dont use, required doesn't work\r\n    constructor(props) {\r\n        super();\r\n        this.state = {\r\n            title: null,\r\n            id: null,\r\n            updated: false\r\n        };\r\n    }\r\n\r\n    onChange = (event, item) => {\r\n        if (item === \"title\") {\r\n            this.setState({ title: event.target.value });\r\n        } else {\r\n            this.setState({ id: event.target.value });\r\n        }\r\n    }\r\n\r\n    updateBook = (event) => {\r\n        event.preventDefault();\r\n        const { title, id } = this.state;\r\n\r\n        if (!title || !id || title.trim().length === 0 || id.trim().length === 0) {\r\n            alert('Please enter the id and new title of the book to be updated!');\r\n            return;\r\n        }\r\n\r\n        const body = {\r\n            title,\r\n        };\r\n\r\n        fetch(`/books/${this.state.id}`, {\r\n            method: \"PUT\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        })\r\n            .then(response => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                }\r\n                throw new Error(`Network response error: ${response.id}, ${response.message}`);\r\n            })\r\n            .then(response => this.setState({ title: response.data.title, updated: true }))\r\n            .catch(error => console.log(error.message));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Card className=\"container shadow p-4 mt-5\">\r\n                <Card.Body>\r\n                    <Card.Title>Update book</Card.Title>\r\n                    <Form className=\"form-inline\">\r\n                        <div className=\"input-group mb-2 mr-sm-2\">\r\n                            <input type=\"text\" className=\"form-control\" placeholder=\"Id\" required onChange={(e) => this.onChange(e, \"id\")} />\r\n                        </div>\r\n                        <label className=\"sr-only\">Title</label>\r\n                        <input type=\"text\" className=\"form-control mb-2 mr-sm-2\" placeholder=\"Title\" required onChange={(e) => this.onChange(e, \"title\")} />\r\n                        <Button type=\"button\" className=\"btn btn-primary\" onClick={this.updateBook}>Update</Button>\r\n                    </Form>\r\n                    <p>{this.state.updated\r\n                        ? `Updated title of book ${this.state.id} to '${this.state.title}'. Get All again to view the new list.`\r\n                        : \"No books updated!\"}</p>\r\n                </Card.Body>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UpdateBook;","import React, { Component } from 'react';\r\nimport { Card, Form, Button } from 'react-bootstrap';\r\n\r\nclass GetBook extends Component {\r\n    constructor(props) {\r\n        super();\r\n        this.state = {\r\n            id: null,\r\n            book: null\r\n        }\r\n    }\r\n\r\n    onChange = (event) => {\r\n        this.setState({ id: event.target.value });\r\n    }\r\n\r\n    getBookById = (event) => {\r\n        event.preventDefault();\r\n        if (this.state.id.length === 0)\r\n            return;\r\n\r\n        fetch(`/books/${this.state.id}`, {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        })\r\n            .then(response => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                }\r\n                throw new Error(`Network response error: ${response.id}, ${response.message}`);\r\n            })\r\n            .then(response => this.setState({ book: response.data }))\r\n            .catch(error => console.log(error.message));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Card className=\"container shadow p-4 mt-5\">\r\n                <Card.Body>\r\n                    <Card.Title>Get a book with Id</Card.Title>\r\n                    <Form className=\"form-inline\">\r\n                        <label className=\"sr-only\">Id</label>\r\n                        <input type=\"text\" className=\"form-control mb-2 mr-sm-2\" placeholder=\"Id\" required onChange={this.onChange} />\r\n                        <Button type=\"button\" className=\"btn btn-info\" onClick={this.getBookById}>Get by Id</Button>\r\n                    </Form>\r\n                    <span>\r\n                        {this.state.book\r\n                            ? <ul>\r\n                                <li>Id: {this.state.book._id}</li>\r\n                                <li>Title: {this.state.book.title}</li>\r\n                            </ul>\r\n                            : \"No book requested!\"}\r\n                    </span>\r\n                </Card.Body>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GetBook;","import React from 'react';\nimport './App.css';\nimport AddBook from './components/AddBook';\nimport GetAllBooks from './components/GetAllBooks';\nimport DeleteBook from './components/DeleteBook';\nimport UpdateBook from './components/UpdateBook';\nimport GetBook from './components/GetBook';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Welcome to CS3219 Task B's deployment site</h1>\n        <h3>Perform API calls below</h3>\n      </header>\n      <GetAllBooks />\n      <AddBook />\n      <GetBook />\n      <UpdateBook />\n      <DeleteBook />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}